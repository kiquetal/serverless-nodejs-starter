# NOTE: update this with your service name
service: aws-secrets-resource-auth
variablesResolutionMode: 20210326
# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
custom:
  serversTable: ${self:service}-${self:provider.stage}-servers
  tokensTable: ${self:service}-${self:provider.stage}-tokens

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  profile: 707132733442_AdministratorAccessTraditional
  region: us-east-1

  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #

  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:AdminDeleteUser
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt:
          - serversTable
          - Arn
    - Effect: Allow
      Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt:
          - tokensTable
          - Arn

functions:
  register:
    handler: lambda/register.main
    environment:
      USERPOOL_ID: us-east-1_ZlRzPJ3M0
      SERVERS_TABLE: ${self:custom.serversTable}
    events:
      - http:
          path: register
          method: post
  login:
    handler: lambda/login.main
    environment:
      USERPOOL_ID: us-east-1_ZlRzPJ3M0
      CLIENT_ID: 6eobkaqk7n9cskoalqidtj09n
      SERVERS_TABLE: ${self:custom.serversTable}
      TOKENS_TABLE: ${self:custom.tokensTable}

    events:
      - http:
          path: login
          method: post
  delete:
    handler: lambda/delete.main
    environment:
      USERPOOL_ID: us-east-1_ZlRzPJ3M0
    events:
      - http:
          path: delete
          method: delete
resources:
  Resources:
    serversTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.serversTable}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    tokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tokensTable}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: ttl
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
