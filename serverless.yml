# NOTE: update this with your service name
service: aws-secrets-resource-auth
variablesResolutionMode: 20210326
# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
custom:
  serversTable: ${self:service}-${self:provider.stage}-servers
  tokensTable: ${self:service}-${self:provider.stage}-tokens
  appsTable: ${self:service}-${self:provider.stage}-app
provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  profile: 707132733442_AdministratorAccessTraditional
  region: us-east-1

  # To load environment variables externally
  # rename local.env to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #

  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:AdminDeleteUser
        - cognito-idp:AdminUpdateUserAttributes
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt:
          - serversTable
          - Arn
    - Effect: Allow
      Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt:
          - tokensTable
          - Arn
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt:
            - appsTable
            - Arn
        - "Fn::Join": ['/', ["Fn::GetAtt": [ appsTable, Arn ], 'index', 'index_by_sk']]


functions:
  register:
    handler: lambda/register.main
    environment:
      USERPOOL_ID: us-east-1_ZlRzPJ3M0
      SERVERS_TABLE: ${self:custom.serversTable}
    events:
      - http:
          path: register
          method: post
  login:
    handler: lambda/login.main
    environment:
      USERPOOL_ID: us-east-1_ZlRzPJ3M0
      CLIENT_ID: 6eobkaqk7n9cskoalqidtj09n
      SERVERS_TABLE: ${self:custom.serversTable}
      TOKENS_TABLE: ${self:custom.tokensTable}

    events:
      - http:
          path: login
          method: post
  delete:
    handler: lambda/delete.main
    environment:
      USERPOOL_ID: us-east-1_ZlRzPJ3M0
    events:
      - http:
          path: delete
          method: delete
  preToken:
    handler: lambda/tokenGenerator.main
    role: roleForTrigger
    environment:
      APPS_TABLE: ${self:custom.appsTable}
  addCredential:
    handler: lambda/creds.main
    environment:
      APPS_TABLE: ${self:custom.appsTable}
    events:
      - http:
          path: credentials
          method: post
  getCreds:
    handler: lambda/creds.get
    environment:
      APPS_TABLE: ${self:custom.appsTable}
    events:
      - http:
          path: credentials
          method: get
  addAccessApp:
    handler: lambda/access.main
    environment:
      APPS_TABLE: ${self:custom.appsTable}
    events:
      - http:
          path: access
          method: post

  setAdmin:
    handler: lambda/admin.main
    environment:
      USERNAME: replace-for-username@gmail.com
      USERPOOL_ID: us-east-1_ZlRzPJ3M0
      IS_ADMIN: no

  tokens:
    handler: lambda/apigeeToken.main
    environment:
      APPS_TABLE : ${self:custom.appsTable}
      APIGEEURL: ${env:APIGEEURL}
    events:
      - http:
          path: token
          method: post
  serverTokens:
    handler: lambda/login.tokens
    environment:
      APPS_TABLE: ${self:custom.appsTable}
      USERPOOL_ID: us-east-1_ZlRzPJ3M0
      CLIENT_ID: 6eobkaqk7n9cskoalqidtj09n
      SERVERS_TABLE: ${self:custom.serversTable}
    events:
      - http:
          path: /server/token
          method: post

resources:
  Resources:
    serversTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.serversTable}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    tokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tokensTable}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: ttl
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    appsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.appsTable}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: index_by_sk
            KeySchema:
              - AttributeName: sk
                KeyType: HASH
              - AttributeName: type
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              WriteCapacityUnits: 5
              ReadCapacityUnits: 5
        ProvisionedThroughput:
          WriteCapacityUnits: 5
          ReadCapacityUnits: 5
    roleForTrigger:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-RoleTrigger
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
            - Effect: Allow
              Principal:
                Service:
                  - cognito-idp.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: PolicyForTriggerCognito
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                     Fn::GetAtt:
                        - appsTable
                        - Arn
